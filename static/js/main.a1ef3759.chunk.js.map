{"version":3,"sources":["components/Article/index.js","components/Chart/index.js","components/Charts/index.js","components/Header/index.js","components/Image/index.js","components/Markdown/index.js","components/Page/index.js","components/Teaser/index.js","App.js","serviceWorker.js","index.js"],"names":["paramId","id","useParams","useState","article","setArticle","load","useCallback","a","fetch","res","text","substr","useEffect","Markdown","data","charttype","url","chartuid","range","options","hAxis","format","title","vAxis","series","0","curveType","1","2","legend","position","chartType","spreadSheetUrl","width","rangetable","className","Chart","to","filename","src","alt","processNodeDefinitions","HtmlToReact","ProcessNodeDefinitions","React","parseHtml","htmlParser","isValidNode","processingInstructions","replaceChildren","shouldProcessNode","node","attribs","processNode","children","index","type","params","Object","keys","reduce","aggr","item","split","Article","Teaser","Charts","Image","processDefaultNode","source","escapeHtml","astPlugins","propId","Header","date","onClick","window","scrollTo","App","exact","path","Page","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a1ef3759.chunk.js","sourcesContent":["import React, { useState, useCallback, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Markdown } from '../';\n\nconst ERROR_404 = '# Strona nie istnieje';\n\nexport default ({ id: paramId }) => {\n  const { id } = useParams();\n  const [article, setArticle] = useState('');\n  const load = useCallback(async id => {\n    try {\n      const res = await fetch(`./articles/${id}.md`);\n      const article = await res.text();\n      if (article.substr(0, 9) === '<!DOCTYPE') {\n        setArticle(ERROR_404);\n      } else {\n        setArticle(article);\n      }\n    } catch (e) {}\n  }, []);\n  useEffect(() => {\n    load(paramId || id);\n  }, [load, paramId, id]);\n  return <Markdown data={article} />;\n};\n","import React from 'react';\nimport { Chart } from 'react-google-charts';\n\nexport default ({ charttype = 'Bar', url, chartuid, range }) => {\n  const options =\n    charttype === 'Table'\n      ? {}\n      : {\n          hAxis: { format: 'short', title: 'Time' },\n          vAxis: { format: 'decimal' },\n          series: {\n            0: { curveType: 'function' },\n            1: { curveType: 'function' },\n            2: { curveType: 'function' },\n          },\n          legend: { position: 'right' },\n        };\n  if (url)\n    return (\n      <Chart\n        chartType={charttype}\n        spreadSheetUrl={url}\n        width=\"100%\"\n        // height=\"400px\"\n        options={options}\n        // rootProps={{ 'data-testid': '1' }}\n      />\n    );\n  return (\n    <Chart\n      chartType={charttype}\n      spreadSheetUrl={`https://docs.google.com/spreadsheets/d/${chartuid}/edit?range=${range}#gid=0`}\n      width=\"100%\"\n      // height=\"400px\"\n      options={options}\n      // rootProps={{ 'data-testid': '1' }}\n    />\n  );\n};\n","import React from 'react';\nimport { Chart } from '../';\nimport './styles.scss';\n\nexport default ({ chartuid, range, charttype = 'Bar', rangetable }) => (\n  <div className=\"Charts\">\n    <div className=\"Charts__table\">\n      <Chart\n        charttype=\"Table\"\n        url={`https://docs.google.com/spreadsheets/d/${chartuid}/edit?range=${rangetable}#gid=0`}\n      />\n    </div>\n    <div className=\"Charts__graph\">\n      <Chart\n        charttype={charttype}\n        url={`https://docs.google.com/spreadsheets/d/${chartuid}/edit?range=${range}#gid=0`}\n      />\n    </div>\n  </div>\n);\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './styles.scss';\n\nexport default () => (\n  <header className=\"Header\">\n    <Link to={'/'}>\n      <strong>Epidemia koronawirusa w Polsce</strong>\n    </Link>\n    <div>statystyki, analizy, prognozy dalszego rozwoju</div>\n  </header>\n);\n","import React from 'react';\nimport './styles.scss';\n\nexport default ({ filename }) => (\n  <img className=\"Image\" src={`/images/${filename}`} alt={filename} />\n);\n","import React from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport HtmlToReact from 'html-to-react';\nimport htmlParser from 'react-markdown/plugins/html-parser';\nimport { Chart, Charts, Teaser, Article, Image } from '../';\n\nconst processNodeDefinitions = new HtmlToReact.ProcessNodeDefinitions(React);\n\nconst parseHtml = htmlParser({\n  isValidNode: () => true,\n  processingInstructions: [\n    {\n      replaceChildren: true,\n      shouldProcessNode: node => node.attribs && node.attribs['data-type'],\n      processNode: (node, children, index) => {\n        const type = node.attribs['data-type'];\n        const params = Object.keys(node.attribs).reduce(\n          (aggr, item) => ({\n            ...aggr,\n            [item.split('-')[1]]: node.attribs[item],\n          }),\n          {},\n        );\n        if (type === 'article') return <Article {...params} />;\n        if (type === 'teaser') return <Teaser {...params} />;\n        if (type === 'chart') return <Chart {...params} />;\n        if (type === 'charts') return <Charts {...params} />;\n        if (type === 'image') return <Image {...params} />;\n        return null;\n      },\n    },\n    {\n      shouldProcessNode: () => true,\n      processNode: processNodeDefinitions.processDefaultNode,\n    },\n  ],\n});\n\nexport default ({ data }) => (\n  <ReactMarkdown source={data} escapeHtml={false} astPlugins={[parseHtml]} />\n);\n","import React from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Header, Article, Teaser } from '../';\n\nexport default ({ id: propId }) => {\n  const { id: paramId } = useParams();\n  const id = propId || paramId;\n  return (\n    <div>\n      <Header />\n      <Article id={id} />\n      {id !== 'kontakt' && <Teaser id=\"kontakt\" title=\"Kontakt\" />}\n    </div>\n  );\n};\n","import React, { useCallback } from 'react';\nimport { Link } from 'react-router-dom';\nimport './styles.scss';\n\nexport default ({ id, title, date }) => {\n  const onClick = useCallback(() => window.scrollTo(0, 0), []);\n  return (\n    <Link className=\"Teaser\" to={id} onClick={onClick}>\n      <h2>{title}</h2>\n      {date && <div className=\"Teaser__date\">{date}</div>}\n    </Link>\n  );\n};\n","import React from 'react';\nimport { HashRouter, Switch, Route } from 'react-router-dom';\nimport { Page } from './components';\nimport './App.css';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <HashRouter>\n        <Switch>\n          <Route exact path=\"/\" children={<Page id=\"homepage\" />} />\n          <Route path=\"/:id\" children={<Page />} />\n          <Route path=\"*\" children={<Page id=\"page-not-found\" />} />\n        </Switch>\n      </HashRouter>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}